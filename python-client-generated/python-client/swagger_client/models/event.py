# coding: utf-8

"""
    Event Management System

    This YAML doc depicts the various endpoints to a RESTapi for a Event management system  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: apiteam@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Event(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'title': 'str',
        'created_at': 'date',
        'start_date': 'date',
        'end_date': 'date',
        'description': 'str',
        'venue': 'str',
        'imageflyer': 'str',
        'website_url': 'str',
        'status': 'str',
        'uid': 'str'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'created_at': 'created_at',
        'start_date': 'start_date',
        'end_date': 'end_date',
        'description': 'description',
        'venue': 'venue',
        'imageflyer': 'image|flyer',
        'website_url': 'website_url',
        'status': 'status',
        'uid': 'uid'
    }

    def __init__(self, id=None, title=None, created_at=None, start_date=None, end_date=None, description=None, venue=None, imageflyer=None, website_url=None, status=None, uid=None, _configuration=None):  # noqa: E501
        """Event - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._title = None
        self._created_at = None
        self._start_date = None
        self._end_date = None
        self._description = None
        self._venue = None
        self._imageflyer = None
        self._website_url = None
        self._status = None
        self._uid = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if created_at is not None:
            self.created_at = created_at
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if description is not None:
            self.description = description
        if venue is not None:
            self.venue = venue
        if imageflyer is not None:
            self.imageflyer = imageflyer
        if website_url is not None:
            self.website_url = website_url
        if status is not None:
            self.status = status
        if uid is not None:
            self.uid = uid

    @property
    def id(self):
        """Gets the id of this Event.  # noqa: E501


        :return: The id of this Event.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Event.


        :param id: The id of this Event.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this Event.  # noqa: E501


        :return: The title of this Event.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Event.


        :param title: The title of this Event.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def created_at(self):
        """Gets the created_at of this Event.  # noqa: E501


        :return: The created_at of this Event.  # noqa: E501
        :rtype: date
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Event.


        :param created_at: The created_at of this Event.  # noqa: E501
        :type: date
        """

        self._created_at = created_at

    @property
    def start_date(self):
        """Gets the start_date of this Event.  # noqa: E501


        :return: The start_date of this Event.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Event.


        :param start_date: The start_date of this Event.  # noqa: E501
        :type: date
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this Event.  # noqa: E501


        :return: The end_date of this Event.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Event.


        :param end_date: The end_date of this Event.  # noqa: E501
        :type: date
        """

        self._end_date = end_date

    @property
    def description(self):
        """Gets the description of this Event.  # noqa: E501


        :return: The description of this Event.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Event.


        :param description: The description of this Event.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def venue(self):
        """Gets the venue of this Event.  # noqa: E501


        :return: The venue of this Event.  # noqa: E501
        :rtype: str
        """
        return self._venue

    @venue.setter
    def venue(self, venue):
        """Sets the venue of this Event.


        :param venue: The venue of this Event.  # noqa: E501
        :type: str
        """

        self._venue = venue

    @property
    def imageflyer(self):
        """Gets the imageflyer of this Event.  # noqa: E501


        :return: The imageflyer of this Event.  # noqa: E501
        :rtype: str
        """
        return self._imageflyer

    @imageflyer.setter
    def imageflyer(self, imageflyer):
        """Sets the imageflyer of this Event.


        :param imageflyer: The imageflyer of this Event.  # noqa: E501
        :type: str
        """

        self._imageflyer = imageflyer

    @property
    def website_url(self):
        """Gets the website_url of this Event.  # noqa: E501


        :return: The website_url of this Event.  # noqa: E501
        :rtype: str
        """
        return self._website_url

    @website_url.setter
    def website_url(self, website_url):
        """Sets the website_url of this Event.


        :param website_url: The website_url of this Event.  # noqa: E501
        :type: str
        """

        self._website_url = website_url

    @property
    def status(self):
        """Gets the status of this Event.  # noqa: E501

        The status of event  # noqa: E501

        :return: The status of this Event.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Event.

        The status of event  # noqa: E501

        :param status: The status of this Event.  # noqa: E501
        :type: str
        """
        allowed_values = ["pending", "published"]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def uid(self):
        """Gets the uid of this Event.  # noqa: E501

        user id of user who created the event  # noqa: E501

        :return: The uid of this Event.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Event.

        user id of user who created the event  # noqa: E501

        :param uid: The uid of this Event.  # noqa: E501
        :type: str
        """

        self._uid = uid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Event, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Event):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Event):
            return True

        return self.to_dict() != other.to_dict()
