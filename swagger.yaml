swagger: "2.0"
info:
  description: "This YAML doc depicts the various endpoints to a RESTapi for a Event management system"
  version: "1.0.0"
  title: "Event Management System"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "duroad.swagger.io"
basePath: "/v2"
tags:
- name: "events"
  description: "Operations about events"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "users"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /events:
    post:
      tags:
      - "events"
      summary: "Add a new event"
      description: ""
      operationId: "addEvent"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Parameters needed for the creation of a new Event object"
        required: true
        schema:
          $ref: "#/definitions/Events"
      responses:
        "405":
          description: "Invalid input"
        "201":
          description: "Created"
      security:
      - JWT_Token: []
      
  /events/groups/{groupId}/users/{email}:
    post:
      tags: 
      - "events"
      summary: "Add User to group"
      description: "Adds a specified user to an existing group"
      operationId: "addUserToGroup"
      produces: 
      - "application/xml"
      - "application/json"
      parameters:
      - name: "groupId"
        in: "path"
        description: "ID of group the admin is in"
        required: true
        type: "integer"
        format: "int64"
      - name: "email"
        in: "path"
        description: "Email of the user to be added to the event organizing group"
        required: true
        type: "string"
      responses:
        "200":
          description: "Member successfully added to group"
          schema:
            $ref: "#/definitions/Affiliation"
        "400":
          description: "User ID supplied may be incorrect"
          schema:
            $ref: "#/definitions/ApiResponse"
        "404":
          description: "User not found"
          schema:
            $ref: "#/definitions/ApiResponse" 
      security:
      - api_key: []
      
  /api/users/{userId}/groups/{groupname}:
    post: 
      tags: 
      - "events"
      summary: "Create a group"
      description: "Creates a group for an event if the group doesnt exist"
      operationId: "createGroup"
      produces: 
      - "application/xml"
      - "application/json"
      parameters: 
      - name: "userId"
        in: "path"
        description: "The userId of the group admin"
        required: true
        type: "integer"
        format: "int64"
      - name: "groupname"
        in: "path"
        description: "The name of the group to be created"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Group Successfully created"
          schema:
            $ref: "#/definitions/Groups"
        "400":
          description: "Invalid userId supplied"
          schema:
            $ref: "#/definitions/ApiResponse"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiResponse" 
      security:
      - api_key: []
      
  /api/events/:
    get:
      tags:
      - "events"
      summary: "Get the first 10 events"
      description: "Get the first 10 events and filter by either date or title if present in query."
      operationId: "getevents"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "query"
        name: "start"
        type: "string"
        required: false
        description: "The start of the date range of the events to filter"
      - in: "query"
        name: "end"
        type: "string"
        description: "The end of the date ranges of the events to filter"
      - in: "query"
        name: "title"
        type: "string"
        description: "The title of the event being filtered"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            xml:
             name: "Events"
            items:
              $ref: "#/definitions/Events"
            minItems: 2
        "400":
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/ApiResponse"
        "404":
          description: "No events Found"
          schema:
            $ref: "#/definitions/ApiResponse" 
      security:
      - api_key: []
        
  /api/events/{eventId}:
    get:
      tags:
      - "events"
      summary: "Find event by ID"
      description: "Returns a single event"
      operationId: "geteventById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "eventId"
        in: "path"
        description: "ID of event to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Events"
        "400":
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/ApiResponse"
        "404":
          description: "Event not found"
          schema:
            $ref: "#/definitions/ApiResponse" 
      security:
      - api_key: []
    put:
      tags:
      - "events"
      summary: "Edit event by ID"
      description: "make and edit to a single Event based on ID number"
      parameters:
      - name: "eventId"
        in: "path"
        required: true
        type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Events"
        "400":
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/ApiResponse"
        "404":
          description: "Event not found"
          schema:
            $ref: "#/definitions/ApiResponse" 
      security:
        - JWT_Token: []
    delete:
      tags:
      - "events"
      summary: "Delete event"
      description: "Delete event by Id"
      operationId: "removeEvent"
      parameters:
      - name: "eventId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Events"
        "400":
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/ApiResponse"
        "404":
          description: "Event not found"
          schema:
            $ref: "#/definitions/ApiResponse" 
      security:
        - JWT_Token: []
  # /event/findByStatus:
  #   get:
  #     tags:
  #     - "event"
  #     summary: "Finds Pets by status"
  #     description: "Multiple status values can be provided with comma separated strings"
  #     operationId: "findPetsByStatus"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - name: "status"
  #       in: "query"
  #       description: "Status values that need to be considered for filter"
  #       required: true
  #       type: "array"
  #       items:
  #         type: "string"
  #         enum:
  #         - "available"
  #         - "pending"
  #         - "sold"
  #         default: "available"
  #       collectionFormat: "multi"
  #     responses:
  #       "200":
  #         description: "successful operation"
  #         schema:
  #           type: "array"
  #           items:
  #             $ref: "#/definitions/Pet"
  #       "400":
  #         description: "Invalid status value"
  #     security:
  #     - petstore_auth:
  #       - "write:pets"
  #       - "read:pets"
  # /pet/{petId}:
  #   get:
  #     tags:
  #     - "pet"
  #     summary: "Find pet by ID"
  #     description: "Returns a single pet"
  #     operationId: "getPetById"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - name: "petId"
  #       in: "path"
  #       description: "ID of pet to return"
  #       required: true
  #       type: "integer"
  #       format: "int64"
  #     responses:
  #       "200":
  #         description: "successful operation"
  #         schema:
  #           $ref: "#/definitions/Pet"
  #       "400":
  #         description: "Invalid ID supplied"
  #       "404":
  #         description: "Pet not found"
  #     security:
  #     - api_key: []
  #   post:
  #     tags:
  #     - "pet"
  #     summary: "Updates a pet in the store with form data"
  #     description: ""
  #     operationId: "updatePetWithForm"
  #     consumes:
  #     - "application/x-www-form-urlencoded"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - name: "petId"
  #       in: "path"
  #       description: "ID of pet that needs to be updated"
  #       required: true
  #       type: "integer"
  #       format: "int64"
  #     - name: "name"
  #       in: "formData"
  #       description: "Updated name of the pet"
  #       required: false
  #       type: "string"
  #     - name: "status"
  #       in: "formData"
  #       description: "Updated status of the pet"
  #       required: false
  #       type: "string"
  #     responses:
  #       "405":
  #         description: "Invalid input"
  #     security:
  #     - petstore_auth:
  #       - "write:pets"
  #       - "read:pets"
  #   delete:
  #     tags:
  #     - "pet"
  #     summary: "Deletes a pet"
  #     description: ""
  #     operationId: "deletePet"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - name: "api_key"
  #       in: "header"
  #       required: false
  #       type: "string"
  #     - name: "petId"
  #       in: "path"
  #       description: "Pet id to delete"
  #       required: true
  #       type: "integer"
  #       format: "int64"
  #     responses:
  #       "400":
  #         description: "Invalid ID supplied"
  #       "404":
  #         description: "Pet not found"
  #     security:
  #     - petstore_auth:
  #       - "write:pets"
  #       - "read:pets"
  # /pet/{petId}/uploadImage:
  #   post:
  #     tags:
  #     - "pet"
  #     summary: "uploads an image"
  #     description: ""
  #     operationId: "uploadFile"
  #     consumes:
  #     - "multipart/form-data"
  #     produces:
  #     - "application/json"
  #     parameters:
  #     - name: "petId"
  #       in: "path"
  #       description: "ID of pet to update"
  #       required: true
  #       type: "integer"
  #       format: "int64"
  #     - name: "additionalMetadata"
  #       in: "formData"
  #       description: "Additional data to pass to server"
  #       required: false
  #       type: "string"
  #     - name: "file"
  #       in: "formData"
  #       description: "file to upload"
  #       required: false
  #       type: "file"
  #     responses:
  #       "200":
  #         description: "successful operation"
  #         schema:
  #           $ref: "#/definitions/ApiResponse"
  #     security:
  #     - petstore_auth:
  #       - "write:pets"
  #       - "read:pets"
  # /store/inventory:
  #   get:
  #     tags:
  #     - "store"
  #     summary: "Returns pet inventories by status"
  #     description: "Returns a map of status codes to quantities"
  #     operationId: "getInventory"
  #     produces:
  #     - "application/json"
  #     parameters: []
  #     responses:
  #       "200":
  #         description: "successful operation"
  #         schema:
  #           type: "object"
  #           additionalProperties:
  #             type: "integer"
  #             format: "int32"
  #     security:
  #     - api_key: []
  # /store/order:
  #   post:
  #     tags:
  #     - "store"
  #     summary: "Place an order for a pet"
  #     description: ""
  #     operationId: "placeOrder"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - in: "body"
  #       name: "body"
  #       description: "order placed for purchasing the pet"
  #       required: true
  #       schema:
  #         $ref: "#/definitions/Order"
  #     responses:
  #       "200":
  #         description: "successful operation"
  #         schema:
  #           $ref: "#/definitions/Order"
  #       "400":
  #         description: "Invalid Order"
  # /store/order/{orderId}:
  #   get:
  #     tags:
  #     - "store"
  #     summary: "Find purchase order by ID"
  #     description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
  #     operationId: "getOrderById"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - name: "orderId"
  #       in: "path"
  #       description: "ID of pet that needs to be fetched"
  #       required: true
  #       type: "integer"
  #       maximum: 10.0
  #       minimum: 1.0
  #       format: "int64"
  #     responses:
  #       "200":
  #         description: "successful operation"
  #         schema:
  #           $ref: "#/definitions/Order"
  #       "400":
  #         description: "Invalid ID supplied"
  #       "404":
  #         description: "Order not found"
  #   delete:
  #     tags:
  #     - "store"
  #     summary: "Delete purchase order by ID"
  #     description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
  #     operationId: "deleteOrder"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - name: "orderId"
  #       in: "path"
  #       description: "ID of the order that needs to be deleted"
  #       required: true
  #       type: "integer"
  #       minimum: 1.0
  #       format: "int64"
  #     responses:
  #       "400":
  #         description: "Invalid ID supplied"
  #       "404":
  #         description: "Order not found"
  /Users:
    post:
      tags:
      - "users"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/Users"
      responses:
        default:
          description: "successful operation"
  /users/createWithArray:
    post:
      tags:
      - "users"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/Users"
      responses:
        default:
          description: "successful operation"
  /users/createWithList:
    post:
      tags:
      - "users"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/Users"
      responses:
        default:
          description: "successful operation"
  /users/login:
    get:
      tags:
      - "users"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /users/logout:
    get:
      tags:
      - "users"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /users/{username}:
    get:
      tags:
      - "users"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Users"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "users"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/Users"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "users"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
securityDefinitions:
  JWT_Token:
    type: apiKey
    in: header
    name: JWT_token
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Events:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
        example: "The Party"
      created_at:
        type: "string"
        format: "date"
      start_date:
        type: "string"
        format: "date"
      end_date:
        type: "string"
        format: "date"
      description:
        type: "string"
        example: "The hottest party of the year, since Covid-19"
      venue:
        type: "string"
        example: "21 Kingston Road, Bog Walk, St. Catherine, Jamaica"
      image|flyer:
        type: "string"
        format: "url"
        example: "flyer.jpg"
      website_url: 
        type: "string"
        format: "URL"
        example: "https://theparty.com"
      status:
        type: "string"
        description: "The status of event"
        enum: [pending, published]
      uid:
        type: "integer"
        format: "int64"
        description: "user id of user who created the event"
    xml:
      name: "Order"
  Users:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      full_name:
        type: "string"
      email:
        type: "string"
        format: "email"
      password:
        type: "string"
        format: "password"
      profile_photo:
        type: "string"
        format: "url"
      role:
        type: "string"
        enum: [admin,user]
      created_at:
        type: "string"
        format: "date"
    xml:
      name: "Users"
  Affiliation:
    type: "object"
    properties:
      userId: 
        type: "integer"
        format: "integer"
      groupId: 
        type: "integer"
        format: "integer"
  Groups:
    type: "object"
    properties:
      id: 
        type: "integer"
        format: "integer"
      name: 
        type: "string"
        format: "string"
      admin: 
        type: "integer"
        format: "integer"
      
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"